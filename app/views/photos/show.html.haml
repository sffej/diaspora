-#   Copyright (c) 2010, Diaspora Inc.  This file is
-#   licensed under the Affero General Public License version 3 or later.  See
-#   the COPYRIGHT file.

- content_for :head do
  = include_javascripts :photos

.span-15.append-1.last
  #photo_controls
    .right
      =link_to "← #{t('previous')}", @prev_photo, :rel => 'prefetch', :id => 'photo_show_left'
      \/
      =link_to "#{t('next')} →", @next_photo, :rel => 'prefetch',  :id => 'photo_show_right'

    - if @photo.status_message_id
      =link_to "← #{t('.view_original_post')}", @photo.status_message
    - else
      \.

  #photo_container
    #show_photo{:data=>{:guid=>@photo.id}}
      -if @ownership
        = image_tag 'ajax-loader.gif', :id => "photo_spinner", :class => "hidden"
        = image_tag @photo.url(:scaled_full), :id => "img1", :exif => "true"
      -else
        = image_tag @photo.url(:scaled_full), :id => "img1", :exif => "true"

      #caption
        = @photo.caption

  %hr

  - if @ownership
    .photo_options{:data=>{:actor=>"#{@photo.person.owner.id}",:actor_person=>"#{@photo.person.id}",:image_url=>"#{@photo.url(:thumb_large)}"}}
      = link_to t('.make_profile_photo'), {:controller => "photos", :action => "make_profile_photo", :photo_id => @photo.id}, :remote => true, :class => 'make_profile_photo'
      |
      = link_to t('.edit'), '#', :id => "edit_photo_toggle"

    #photo_edit_options
      %h4= t('.edit_delete_photo')
      %p
        = form_for @photo, :remote => true do |p|
          = p.text_field :caption, :value => @photo.caption
          = p.submit t('.update_photo')
      %p
        = button_to t('.delete_photo'), @photo, :confirm => t('are_you_sure'), :method => :delete

.span-8.last

  #original_post_info
    = render 'shared/author_info', :person => @photo.person, :post => @photo

    - if @photo.status_message_id
      %p
        = markdownify(@photo.status_message.message)

      %p
        - for photo in @additional_photos
          = link_to (image_tag photo.url(:thumb_small)), object_path(photo)

  %h4= t('_comments')

  #photo_stream.stream.show
    %div{:data=>{:guid=>@parent.id}}
      = render "comments/comments", :post_id => @parent.id, :comment_hashes => @comment_hashes, :always_expanded => true
